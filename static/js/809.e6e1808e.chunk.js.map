{"version":3,"file":"static/js/809.e6e1808e.chunk.js","mappings":"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","sources":["service/CommentService.ts","components/comment/CommentComponent.tsx","components/problem/DetailComponent.tsx","service/CartService.ts"],"sourcesContent":["import axios from \"axios\";\nimport {CommentDataType} from \"../types/CommentTypes\";\n\nconst host =`http://localhost:8080/mp/comments`\n\nclass CommentService {\n    public static getList = async (problemId: string | undefined, pageNum: string) => {\n        let result = await axios.get(`${host}/${problemId}/${pageNum }`);\n        return result.data;\n    }\n    public static post = async (commentData : CommentDataType) => {\n        if ( commentData.content===\"\"){\n            return \"내용을 채워주세요!\"\n        }\n        const result = await axios.post(`${host}/post`, commentData)\n        return result.data;\n    }\n}\nexport default CommentService;","import React, {ChangeEvent, useState} from 'react';\nimport styled from \"styled-components\";\nimport {useNavigate, useParams, useSearchParams} from \"react-router-dom\";\nimport commentService from \"../../service/CommentService\";\nimport {useQuery} from \"react-query\";\nimport {CommentDataType} from \"../../types/CommentTypes\";\nimport {message} from \"antd\";\nimport memberRepository from \"../../repository/MemberRepository\";\n\ninterface CommentComponentProps {\n    userId?: any\n}\nfunction CommentComponent({userId}: CommentComponentProps) {\n    const {problemId} = useParams();\n    const [searchParams, setSearchParams] = useSearchParams();\n    const commentPage = searchParams.get(\"commentPage\");\n    const navigate = useNavigate();\n    const loginCheck = memberRepository.getLoginCheck();\n    const [sendCheck, setSendCheck] = useState<boolean>(false);\n    const [messageApi, contextHolder] = message.useMessage();\n    const error = (content:string) => {\n        messageApi.open({\n            type: 'error',\n            content: `${content}`,\n            duration : 1,\n        });\n    };\n    const initState: CommentDataType = {\n        content: \"\",\n        parentId: problemId,\n        writerId: userId,\n    }\n    const [commentData, setCommentData] = useState<CommentDataType>(initState);\n    const handleChange = (e: ChangeEvent<HTMLInputElement>): void => {\n        commentData[e.target.name] = e.target.value;\n        setCommentData({...commentData});\n    }\n    let result = useQuery([problemId, searchParams.get(\"commentPage\"),sendCheck], async () => {\n        if ( commentPage !== null ){\n            return commentService.getList(problemId, commentPage)\n        }\n    })\n    const handleClick = () => {\n        if (!loginCheck){\n            error(\"로그인을 안하면 댓글 작성이 안됩니다!\")\n        } else {\n            commentService.post(commentData).then((response) => {\n                if (response === \"내용을 채워주세요!\") {\n                    error(response)\n                }\n                setSendCheck(!sendCheck)\n                setCommentData({\n                    content: \"\",\n                    parentId: problemId,\n                    writerId: userId,\n                })\n            }).catch(() => {\n                error(\"댓글 작성 중 오류 발생\")\n            })\n        }\n    }\n    return (\n        <CommentBoxContainer>\n            {contextHolder}\n            <CommentBox>\n                {\n                    result.isLoading ? <></> :\n                        result.data.commentList.map((item: any, i: number) => {\n                            return (\n                                <div key={i}>\n                                    <ProfileBox><br/>\n                                        <strong>{item[1].displayName}</strong>\n                                    </ProfileBox><br/>\n                                    <Comment>\n                                        <p>{item[0].content}</p>\n                                    </Comment>\n                                </div>\n                            )\n                        })\n                }\n            </CommentBox><br/>\n            <PageNationBox>\n                {\n                    result.isLoading ? <></> :\n                        result.data.numList.map((item: any, i: number) => {\n                            return (\n                                <PageBtn key={i} onClick={() => {\n                                    navigate(`../detail/${problemId}?commentPage=${item}`)\n                                }}>\n                                    {item}\n                                </PageBtn>\n                            )\n                        })\n                }\n            </PageNationBox>\n            <CommentInput value={commentData.content} name={\"content\"} onChange={handleChange}/>\n            <CommentBtn onClick={handleClick}>전송</CommentBtn>\n            <br/><br/><br/><br/><br/><br/>\n        </CommentBoxContainer>\n    );\n}\n\nconst CommentBoxContainer = styled.div`\n    width: 70%;\n    height: 100%;\n    left: 50px;\n    float: left;\n    @media screen and (max-width: 975px) {\n        width: 100%;\n        float: none;\n    }\n`\nconst CommentBox = styled.div`\n    width: 100%;\n    height: 100%;\n`\nconst ProfileBox = styled.div`\n    width: 20%;\n`\nconst CommentInput = styled.input`\n    width: 300px;\n    padding: 5px 10px;\n    margin-top: 30px;\n    height: 30px;\n    border: solid 2px rgb(225, 225, 225);\n    color: rgb(129, 129, 129);\n\n    &:focus {\n        outline: none;\n    }\n\n    @media screen and (max-width: 725px) {\n        width: 200px;\n    }\n    @media screen and (max-width: 975px) {\n        width: 150px;\n    }\n`\nconst Comment = styled.div`\n    width: 70%;\n    text-align: start;\n    border-bottom: 1px solid rgb(235, 235, 235);\n\n`\nconst CommentBtn = styled.button`\n    width: 80px;\n    height: 40px;\n    border-radius: 2px;\n    margin-left: 10px;\n    background-color: #fff;\n    color: rgb(82, 138, 207);\n    font-size: 16px;\n    font-weight: 400;\n    border: solid 2px rgb(82, 138, 207);\n    transition: all 0.3s;\n    cursor: pointer;\n\n    &:hover {\n        background-color: rgb(82, 138, 207);;\n        color: #fff;\n    }\n`\nconst PageBtn = styled.button`\n    width: 30px;\n    height: 30px;\n    font-weight: 550;\n    border: solid 2px rgb(69, 136, 245);;\n    background-color: transparent;\n    color: rgb(69, 136, 245);\n    margin: 0 5px;\n    cursor: pointer;\n\n    &:hover {\n        background-color: rgb(69, 136, 245);\n        color: #fff;\n    }\n`\nconst PageNationBox = styled.div`\n    width: 80%;\n    height: 35px;\n    display: flex;\n    justify-content: start;\n    @media screen and (max-width: 725px) {\n        width: 100%;\n    }\n`\nexport default CommentComponent;","import React, {useEffect, useState} from 'react';\nimport styled from \"styled-components\";\nimport { CustomBanner, CustomBannerAside, CustomBannerBox} from \"../../Global.style\";\nimport {Link, useNavigate, useParams, useSearchParams} from \"react-router-dom\";\nimport problemService from \"../../service/ProblemService\";\nimport {ProblemDataType} from \"../../types/ProblemTypes\";\nimport CommentComponent from \"../comment/CommentComponent\";\nimport cartService from \"../../service/CartService\";\nimport {message} from \"antd\";\nimport salesService from \"../../service/SalesService\";\nimport {SalesDataType} from \"../../types/SalesTypes\";\nimport {CartDataTypes} from \"../../types/CartTypes\";\nimport memberRepository from \"../../repository/MemberRepository\";\nconst initState = {\n    problemId : null,\n    title : \"\",\n    price : 0,\n    description : \"\",\n    category : \"\",\n    level : \"\",\n    answer : 0,\n    quizFileNames :  [],\n    answerList :  [],\n    delFlag : false,\n    writerId : \"\"\n}\n\nfunction DetailComponent() {\n    const navigate = useNavigate();\n    const {problemId} = useParams();\n    const [serverData, setServerData] = useState<ProblemDataType>(initState);\n    const userId = memberRepository.getUserId()\n    const [messageApi, contextHolder] = message.useMessage();\n    const [answer, setAnswer] = useState<number>(0);\n    const loginCheck = memberRepository.getLoginCheck()\n    // alert 에러 생성 함수\n    const error = (content:string) => {\n        messageApi.open({\n            type: 'error',\n            content: `${content}`,\n            duration : 1,\n        });\n    };\n    // alert success 생성 함수\n    const success = (content:string) => {\n        messageApi.open({\n            type: 'success',\n            content: `${content}`,\n            duration : 1,\n        });\n    };\n    const info = (content : string) => {\n        messageApi.info(`${content}`);\n    };\n    // 장바구니 데이터\n    const cartData = {\n        problemId : problemId,\n        ownerId : userId\n    }\n    // 구매 데이터\n    const salesData = {\n        problemId : problemId,\n        memberId : userId\n    }\n    const answerData = {\n        answer : answer,\n        problemId : problemId,\n        memberId : userId\n    }\n    const checkAnswer = () => {\n        if (!loginCheck){\n            info(\"로그인을 먼저 진행해주세요!\")\n        } else {\n            salesService.answerCheck(answerData).then(response => {\n                if (response === \"INCORRECT\") {\n                    info(\"정답이 아닙니다\")\n                    setAnswer(0)\n                } else if (response === \"CORRECT\") {\n                    success(\"정답입니다! 100코인 지급 완료\")\n                    setAnswer(0)\n                }\n            })\n        }\n    }\n    const moveToModify = (problemId: number | null) => {\n        if (!loginCheck){\n            info(\"로그인이 필요합니다\")\n        } else {\n            navigate(`/problems/modify/${problemId}`)\n        }\n    }\n    const cartHandleClick = (cartData : CartDataTypes) => {\n        cartService.register(cartData).then(response=>{\n            if (response === \"ERROR\"){\n                error(\"에러가 발생했습니다!\")\n            } else if (response === \"SUCCESS\"){\n                success(\"장바구니 추가 완료\")\n            }\n        })\n    }\n    const registerCheck = () => {\n        if (!loginCheck){\n            error(\"로그인을 해주세요!\")\n        } else {\n            cartService.registerCheck(cartData).then((response) => {\n                if (response === \"ALREADY_EXIST\") {\n                    error(\"이미 장바구니에 추가된 상품입니다\")\n                } else {\n                    cartHandleClick(cartData)\n                }\n            }).catch((error) => {\n                error(\"장바구니 추가 중 오류가 발생했습니다\")\n            })\n        }\n    }\n    const purchase = (salesData:SalesDataType) => {\n        salesService.purchase(salesData).then(response=>{\n            if (response === \"SUCCESS\"){\n                success(\"답지 구매 완료\")\n            } else if (response === \"ERROR\"){\n                error(\"답지 구매 중 에러 발생!\")\n            }\n        })\n    }\n    const purchaseCheck = () => {\n        if (!loginCheck){\n            error(\"로그인을 먼저 해주세요\")\n        } else {\n            salesService.purchaseCheck(salesData).then(response => {\n                if (response === \"SUCCESS\") {\n                    purchase(salesData)\n                } else if (response === \"ALREADY_PURCHASED\") {\n                    error(\"이미 구매한 답지입니다\")\n                } else {\n                    error(\"문제 등록 중 오류가 발생했습니다\")\n                }\n\n            }).catch(err => {\n                error(\"에러 발생\")\n            })\n        }\n    }\n    const handleDelete = () => {\n        if (typeof problemId === \"string\") {\n            problemService.deleteOne(problemId, userId).then(response=>{\n                alert(\"문제 삭제 완료\")\n                navigate(`../${serverData.category}/1`)\n            }).catch(()=>error(\"삭제 중 오류 발생\"))\n        }\n    }\n    useEffect(() => {\n        if (problemId != null) {\n            problemService.getOne(problemId).then((response) => {\n                let copy = {...response}\n                setServerData(copy)\n            })\n        }\n    }, [problemId]);\n\n    return (\n        <>\n            <CustomBannerBox>\n                {contextHolder}\n                <CustomBanner>\n                    <Link to={\"/\"}><small>HOME</small></Link><br/><br/><br/>\n                    <p style={{fontSize: \"25px\"}}>{serverData.title}</p><br/>\n                    <small>{serverData.category}</small>&nbsp;\n                    <small>{serverData.level}</small>\n                </CustomBanner>\n                <CustomBannerAside>\n                </CustomBannerAside>\n            </CustomBannerBox>\n\n            <DetailBox>\n                <div style={{width: \"95%\", margin: \"0 auto\"}}><br/><br/><br/>\n                    <div style={{padding:\"0 50px\"}}>\n                        <strong>문제 설명</strong><br/><br/><br/>\n                        <p>{serverData.description}</p>\n                    </div>\n                    {\n                        serverData.quizFileNames.length !== 0 ?\n                        serverData.quizFileNames.map((item:string)=>{\n                            return (\n                                <QuizImg key={item} src={`http://localhost:8080/mp/problems/view/${item}`}/>\n                            )\n                        }) :  <QuizImg src={\"https://placehold.co/600x400\"}/>\n                    }\n                </div>\n            </DetailBox>\n            <AsideBox>\n                {\n                    userId === serverData.writerId ?\n                        <Aside style={{height:\"300px\"}}>\n                            <div style={{width: \"90%\", margin: \"0 auto\"}}>\n                                <CartAddBtn style={{marginTop:\"30px\"}} onClick={()=>moveToModify(serverData.problemId)}>\n                                    문제 수정하기\n                                </CartAddBtn>\n                                <ProblemDeleteBtn onClick={handleDelete}>\n                                    문제 삭제하기\n                                </ProblemDeleteBtn>\n                                <h4 className={\"font-xl mt-20\"}>{serverData.price}C</h4>\n                            </div>\n                        </Aside> :\n                        <Aside>\n                            <div style={{width: \"90%\", margin: \"0 auto\"}}>\n                                <PurchaseBtn onClick={purchaseCheck}>\n                                    답지 구매하기\n                                </PurchaseBtn>\n                                <CartAddBtn onClick={registerCheck}>\n                                    장바구니 추가\n                                </CartAddBtn>\n                                <h4 className={\"font-xl mt-20\"}>{serverData.price}C</h4>\n                                <div><AnswerInput type={\"number\"} value={answer} onChange={(e:any)=>setAnswer(e.target.value)}\n                                    name={\"answer\"} placeholder={\"정답을 맞춰보세요!!\"}/></div>\n                                <div>\n                                    <AnswerBtn onClick={checkAnswer}>\n                                        정답 제출하기\n                                    </AnswerBtn>\n                                </div>\n\n                            </div>\n                        </Aside>\n                }\n            </AsideBox>\n\n            <CommentComponent userId={userId}/>\n\n        </>\n    );\n}\nconst QuizImg = styled.img`\n    width: 100%;\n    border-radius: 5px;\n    margin: 40px auto;\n`\nconst DetailBox = styled.div`\n    width: 70%;\n    height: 100%;\n    float: left;\n    @media screen and (max-width : 975px) {\n        width: 100%;\n        float: none;\n    }\n    background-color: #fff;\n`\nconst AsideBox = styled.aside`\n    width: 30%;\n    height: 100%;\n    float: right;\n    background-color: #fff;\n    @media screen and (max-width : 975px) {\n        width: 100%;\n        float: none;\n    }\n`\nconst Aside = styled.aside`\n    width: 95%;\n    height: 430px;\n    margin: 10px auto;\n    border: 1px solid rgb(230,230,230);\n    background-color: rgb(250,250,250);\n    text-align: center;\n\n`\nconst PurchaseBtn = styled.button`\n    height: 70px;\n    border-radius: 5px;\n    margin: 40px 0 auto;\n    background-color: rgb(82, 138, 207);\n    color: #fff;\n    font-size: 16px;\n    font-weight: 400;\n    border: none;\n    transition: all 0.3s;\n    cursor: pointer;\n    &:hover {\n        background-color: rgb(66, 116, 174);\n    }\n`\nconst CartAddBtn = styled.button`\n    height: 70px;\n    border-radius: 5px;\n    margin: 10px auto;\n    background-color: rgb(93, 93, 93);\n    color: #fff;\n    font-size: 16px;\n    font-weight: 400;\n    border: none;\n    transition: all 0.3s;\n    cursor: pointer;\n    &:hover {\n        background-color: rgb(66, 66, 66);\n    }\n`\nconst ProblemDeleteBtn = styled.button`\n    height: 70px;\n    border-radius: 5px;\n    margin: 10px auto;\n    background-color: rgb(237,98,91);\n    color: #fff;\n    font-size: 16px;\n    font-weight: 400;\n    border: none;\n    transition: all 0.3s;\n    cursor: pointer;\n    &:hover {\n        background-color: rgb(223, 79, 73);\n    }\n`\nconst AnswerInput = styled.input`\n    width: 200px;\n    padding: 5px 10px;\n    margin-top: 30px;\n    height: 30px;\n    border: solid 1.5px rgb(225, 225, 225);\n    color: rgb(161, 161, 161);\n    &:focus {\n        outline: none;\n    }\n`\nconst AnswerBtn = styled.button`\n    width: 180px;\n    padding: 5px 10px;\n    height: 50px;\n    border: none;\n    background-color: rgb(237,98,91);\n    color: #fff;\n    border-radius: 3px;\n    margin-top: 20px;\n    font-weight: 300;\n    cursor: pointer;\n    transition: all 0.3s;\n    &:hover {\n        background-color: rgb(223, 79, 73);\n    }\n`\nexport default DetailComponent;","import jwtAxios from \"../util/jwtUtil\";\nimport {CartDataTypes} from \"../types/CartTypes\";\n\nconst host = `http://localhost:8080/mp/carts`\n\nclass CartService {\n\n    static register = async (cartData: CartDataTypes)=>{\n        const result = await jwtAxios.post(`${host}/register`,cartData)\n        return result.data;\n    }\n    static getList = async (memberId : string) => {\n        const result = await jwtAxios.get(`${host}?memberId=${memberId}`)\n        return result.data;\n    }\n    static delete = async (cartId : string,memberId : string) => {\n        const result = await jwtAxios.delete(`${host}/delete/${cartId}?memberId=${memberId}`)\n        return result.data;\n    }\n    static registerCheck = async (cartData: CartDataTypes)=> {\n        const result = await jwtAxios.post(`${host}/register-check`, cartData)\n        return result.data;\n    }\n    static deleteAll = async (memberId:string) => {\n        const result = await jwtAxios.delete(`${host}/delete/all?memberId=${memberId}`)\n        return result.data;\n    }\n\n}\nexport default CartService;"],"names":["host","CommentService","getList","async","problemId","pageNum","axios","get","concat","data","post","commentData","content","CommentBoxContainer","styled","div","_templateObject","_taggedTemplateLiteral","CommentBox","_templateObject2","ProfileBox","_templateObject3","CommentInput","input","_templateObject4","Comment","_templateObject5","CommentBtn","button","_templateObject6","PageBtn","_templateObject7","PageNationBox","_templateObject8","_ref","userId","useParams","searchParams","setSearchParams","useSearchParams","commentPage","navigate","useNavigate","loginCheck","memberRepository","getLoginCheck","sendCheck","setSendCheck","useState","messageApi","contextHolder","message","useMessage","error","open","type","duration","initState","parentId","writerId","setCommentData","result","useQuery","commentService","_jsxs","children","_jsx","isLoading","_Fragment","commentList","map","item","i","displayName","numList","onClick","value","name","onChange","e","target","handleClick","then","response","catch","title","price","description","category","level","answer","quizFileNames","answerList","delFlag","QuizImg","img","DetailBox","AsideBox","aside","Aside","PurchaseBtn","CartAddBtn","ProblemDeleteBtn","AnswerInput","AnswerBtn","_templateObject9","serverData","setServerData","getUserId","setAnswer","success","info","cartData","ownerId","salesData","memberId","answerData","useEffect","problemService","getOne","copy","CustomBannerBox","CustomBanner","Link","to","style","fontSize","CustomBannerAside","width","margin","padding","length","src","height","marginTop","moveToModify","handleDelete","deleteOne","alert","className","purchaseCheck","salesService","purchase","err","registerCheck","cartService","register","cartHandleClick","placeholder","checkAnswer","answerCheck","CommentComponent","CartService","jwtAxios","delete","cartId","deleteAll"],"sourceRoot":""}