{"version":3,"file":"static/js/874.582b9d3e.chunk.js","mappings":"8YAmKA,MAAMA,EAAUC,EAAAA,GAAOC,IAAGC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,6FAMpBC,EAAWJ,EAAAA,GAAOK,MAAKC,IAAAA,GAAAH,EAAAA,EAAAA,GAAA,8FAMvBI,EAAgBP,EAAAA,GAAOC,IAAGO,IAAAA,GAAAL,EAAAA,EAAAA,GAAA,4PAYnBM,EAAkBT,EAAAA,GAAOU,MAAKC,IAAAA,GAAAR,EAAAA,EAAAA,GAAA,yPAY9BS,EAAmBZ,EAAAA,GAAOa,OAAMC,IAAAA,GAAAX,EAAAA,EAAAA,GAAA,0JAQhCY,EAAmBf,EAAAA,GAAOC,IAAGe,IAAAA,GAAAb,EAAAA,EAAAA,GAAA,wIAO7Bc,EAAqBjB,EAAAA,GAAOkB,MAAKC,IAAAA,GAAAhB,EAAAA,EAAAA,GAAA,qPAaxCiB,EAAU,CAAC,UAAW,WACtBC,EAAkBC,GACpBA,EAAOC,KAAKC,GAAU,IAAIC,EAAAA,EAAUD,GAAOE,QAAQ,GAAGC,aACpDC,EAAmBN,GACrBA,EAAOC,KAAKC,GAAU,IAAIC,EAAAA,EAAUD,GAAOK,OAAO,GAAGF,aACzD,EA3NA,WACI,MAAMG,EAAWC,EAAAA,EAAiBC,YAC5BC,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,OACX,UAACC,IAAaC,EAAAA,EAAAA,KACdC,EAAkB,GAClBC,EAAoB,IACnBC,EAAMC,IAAWC,EAAAA,EAAAA,UAAc,KAC/BC,EAAQC,IAAaF,EAAAA,EAAAA,UAAc,IACpCG,GAAcC,EAAAA,EAAAA,KAAaC,GAAoBA,EAAMF,eACpDG,EAAaC,IAAkBP,EAAAA,EAAAA,UAAc,CAChDN,UAAY,GACZc,MAAQ,GACRC,MAAQ,EACRC,YAAc,GACdC,SAAW,GACXC,MAAQ,GACRX,OAAS,GACTd,SAAWA,KAER0B,EAAYC,GAAiBC,EAAAA,GAAQC,aACtCC,EAASC,IACXL,EAAWM,KAAK,CACZC,KAAM,QACNF,QAAQ,GAADG,OAAKH,GACZI,SAAW,GACb,GAENC,EAAAA,EAAAA,YAAU,KACmB,kBAAd7B,GACP8B,EAAAA,EAAeC,OAAO/B,GAAWgC,MAAKC,IAClC,IAAIC,EAAO,IAAID,GACfpB,EAAeqB,EAAK,GAE5B,GACD,IACH,MAAMC,EAAuBC,IACzBxB,EAAYwB,EAAEC,OAAOC,MAAQF,EAAEC,OAAOE,MACtC1B,EAAe,IAAID,GAAa,EAgBpC,OACI4B,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACIF,EAAAA,EAAAA,MAACG,EAAAA,GAAe,CAAAD,SAAA,EACZF,EAAAA,EAAAA,MAACI,EAAAA,EAAY,CAAAF,SAAA,EACTG,EAAAA,EAAAA,KAACC,EAAAA,GAAI,CAACC,GAAI,IAAIL,UAACG,EAAAA,EAAAA,KAAA,SAAAH,SAAO,YAAmBG,EAAAA,EAAAA,KAAA,UAAKA,EAAAA,EAAAA,KAAA,UAAKA,EAAAA,EAAAA,KAAA,UACnDA,EAAAA,EAAAA,KAAA,KAAGG,MAAO,CAACC,SAAS,QAAQP,SAAC,8CAEjCG,EAAAA,EAAAA,KAACK,EAAAA,GAAiB,QAEtBL,EAAAA,EAAAA,KAACnF,EAAO,CAAAgF,UACJF,EAAAA,EAAAA,MAACtE,EAAa,CAAAwE,SAAA,EACVG,EAAAA,EAAAA,KAAA,KAAAH,SAAG,+BAASG,EAAAA,EAAAA,KAAA,UACZA,EAAAA,EAAAA,KAACzE,EAAe,CAACsD,KAAM,OAAQa,MAAO3B,EAAYE,MAAOwB,KAAM,QAC9Ca,SAAUhB,EAAqBiB,UAAU,KAC1DP,EAAAA,EAAAA,KAAA,UAAKA,EAAAA,EAAAA,KAAA,UAAKA,EAAAA,EAAAA,KAAA,UACVA,EAAAA,EAAAA,KAAA,KAAAH,SAAG,+BAASG,EAAAA,EAAAA,KAAA,UACZL,EAAAA,EAAAA,MAACjE,EAAgB,CAACgE,MAAO3B,EAAYK,SAAUqB,KAAM,WACnCa,SAAUhB,EAAoBO,SAAA,EAC5CG,EAAAA,EAAAA,KAAA,UAAQN,MAAM,SAAQG,SAAC,kBACvBG,EAAAA,EAAAA,KAAA,UAAQN,MAAM,OAAMG,SAAC,kBACrBG,EAAAA,EAAAA,KAAA,UAAQN,MAAM,UAASG,SAAC,kBACxBG,EAAAA,EAAAA,KAAA,UAAQN,MAAM,UAASG,SAAC,+BACxBG,EAAAA,EAAAA,KAAA,UAAQN,MAAM,SAAQG,SAAC,kCAE3BG,EAAAA,EAAAA,KAAA,UAAKA,EAAAA,EAAAA,KAAA,UAAKA,EAAAA,EAAAA,KAAA,UACVA,EAAAA,EAAAA,KAAA,KAAAH,SAAG,wBAAOG,EAAAA,EAAAA,KAAA,UACVL,EAAAA,EAAAA,MAACjE,EAAgB,CAACgE,MAAO3B,EAAYK,UAAY,GAAIqB,KAAM,QACzCa,SAAUhB,EAAoBO,SAAA,EAC5CG,EAAAA,EAAAA,KAAA,UAAQN,MAAM,OAAMG,SAAC,kBACrBG,EAAAA,EAAAA,KAAA,UAAQN,MAAM,SAAQG,SAAC,kBACvBG,EAAAA,EAAAA,KAAA,UAAQN,MAAM,OAAMG,SAAC,2BAEzBG,EAAAA,EAAAA,KAAA,UAAKA,EAAAA,EAAAA,KAAA,UAAKA,EAAAA,EAAAA,KAAA,UACVA,EAAAA,EAAAA,KAAA,KAAAH,SAAG,qBAASG,EAAAA,EAAAA,KAAA,UACZA,EAAAA,EAAAA,KAACzE,EAAe,CAACmE,MAAO3B,EAAYG,MAAOuB,KAAM,QAChCa,SAAUhB,EAAqBiB,UAAU,KAC1DP,EAAAA,EAAAA,KAAA,UAAKA,EAAAA,EAAAA,KAAA,UAAKA,EAAAA,EAAAA,KAAA,UACVA,EAAAA,EAAAA,KAAA,KAAAH,SAAG,+BAASG,EAAAA,EAAAA,KAAA,UACZA,EAAAA,EAAAA,KAACzE,EAAe,CAACmE,MAAO3B,EAAYI,YAAasB,KAAM,cACtCa,SAAUhB,EAAqBiB,UAAU,KAC1DP,EAAAA,EAAAA,KAAA,UAAKA,EAAAA,EAAAA,KAAA,UAAKA,EAAAA,EAAAA,KAAA,UACVA,EAAAA,EAAAA,KAAA,KAAAH,SAAG,qCAAUG,EAAAA,EAAAA,KAAA,UACbA,EAAAA,EAAAA,KAACzE,EAAe,CAACiF,OAAQ,UAAWC,UAAU,EAAMH,SAAUI,UAC1DrD,EAASsD,KAAKpB,EAAEqB,cAAcC,MAAM,IACpCrD,EAAQH,EAAS,EAClBwB,KAAM,UACTmB,EAAAA,EAAAA,KAAA,UAAKA,EAAAA,EAAAA,KAAA,UAAKA,EAAAA,EAAAA,KAAA,UACVA,EAAAA,EAAAA,KAAA,KAAAH,SAAG,+BAASG,EAAAA,EAAAA,KAAA,UACZA,EAAAA,EAAAA,KAACzE,EAAe,CAACkE,KAAM,SAAUC,MAAO3B,EAAYL,OACnC4C,SAAUhB,EAAqBiB,UAAU,KAC1DP,EAAAA,EAAAA,KAACc,EAAAA,GAAc,CACXC,MAAO,CACHC,WAAY,CACRC,OAAQ,CACJC,aAAa,2BAADpC,OAA6B5C,EAAQiF,KAAK,MAAK,KAC3DC,kBAAkB,2BAADtC,OAA6B3C,EAAeD,GAASiF,KAAK,MAAK,KAChFE,mBAAmB,2BAADvC,OAA6BpC,EAAgBR,GAASiF,KAAK,MAAK,KAClFG,UAAW,KAGrBzB,UAEFG,EAAAA,EAAAA,KAAA,OAAAH,UACIG,EAAAA,EAAAA,KAACiB,EAAAA,GAAM,CAACpC,KAAK,UAAU0C,KAAK,QAAQC,QAASA,KACzCzE,GAAS0E,EAAAA,EAAAA,MAAwB,EAE7BtB,MAAO,CAACuB,MAAO,QAASC,OAAQ,OAAQC,QAAS,WAAYC,UAAW,QAAQhC,SAAC,uCAOzGG,EAAAA,EAAAA,KAAC9E,EAAQ,IAEL0C,GACIoC,EAAAA,EAAAA,KAAC8B,EAAAA,GAAO,CAAAjC,UACJF,EAAAA,EAAAA,MAACoC,EAAAA,eAAc,CAAAlC,SAAA,EACXG,EAAAA,EAAAA,KAACgC,EAAAA,oBAAmB,CAACC,QAAS,YAAYpC,UACtCG,EAAAA,EAAAA,KAAA,KAAAH,SAAG,4DAEPG,EAAAA,EAAAA,KAACkC,EAAAA,kBAAiB,CAACV,QA/FvBW,KAChBlD,EAAAA,EAAemD,OAAOrE,EAAaR,EAAMG,GAAQyB,MAAMC,IACnDiD,QAAQC,IAAIlD,GACI,6DAAbA,GAEqB,0EAAbA,EADPV,EAAMU,GAKNnC,EAAS,yBAAD6B,OAA0Bf,EAAYZ,UAAS,mBAC3D,GACF,EAoF0D0C,SAAC,+BACzCG,EAAAA,EAAAA,KAACuC,EAAAA,UAAS,CAACf,QAASA,KAChBzE,GAASyF,EAAAA,EAAAA,MAAyB,EACpC3C,SAAC,kBACHG,EAAAA,EAAAA,KAAA,SAAOG,MAAO,CAACsC,WAAW,UAAWC,GAAI,YAAajC,UAAU,EAAMD,OAAQ,UAAWF,SAAWI,UAChGpD,EAAWqD,KAAKpB,EAAEqB,cAAcC,MAAM,IACtClD,EAAUL,EAAW,EACtBuB,KAAK,eAEHmB,EAAAA,EAAAA,KAAAJ,EAAAA,SAAA,MAIjC,C","sources":["components/problem/ModifyComponent.tsx"],"sourcesContent":["import React, {useEffect, useRef, useState} from 'react';\nimport {Link, useNavigate, useParams} from \"react-router-dom\";\nimport styled from \"styled-components\";\nimport {BlackBg, CustomBanner, CustomBannerAside, CustomBannerBox, CustomBannerBtn, Wrapper} from \"../../Global.style\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {changeIsModalOpenFalse, changeIsModalOpenTrue} from \"../../store/store\";\nimport {Button, ConfigProvider, message} from \"antd\";\nimport {TinyColor} from \"@ctrl/tinycolor\";\nimport {RootState} from \"../../index\";\nimport memberRepository from \"../../repository/MemberRepository\";\nimport problemService from \"../../service/ProblemService\";\nimport {AnswerImgInputBtn, AnswerImgInputLabel, CancelBtn, UploadModalBox} from \"./WriteComponent\";\n\nfunction ModifyComponent() {\n    const writerId = memberRepository.getUserId()\n    const dispatch = useDispatch();\n    const navigate = useNavigate();\n    const {problemId} = useParams();\n    const quizList: any[] = []\n    const answerList: any[] = []\n    const [quiz, setQuiz] = useState<any>([])\n    const [answer, setAnswer] = useState<any>([])\n    const isModalOpen = useSelector((state:RootState) => state.isModalOpen);\n    const [problemData, setProblemData] = useState<any>({\n        problemId : \"\",\n        title : \"\",\n        price : 0,\n        description : \"\",\n        category : \"\",\n        level : \"\",\n        answer : \"\",\n        writerId : writerId\n    })\n    const [messageApi, contextHolder] = message.useMessage();\n    const error = (content:string) => {\n        messageApi.open({\n            type: 'error',\n            content: `${content}`,\n            duration : 1,\n        });\n    };\n    useEffect(() => {\n        if (typeof problemId === \"string\") {\n            problemService.getOne(problemId).then(response=>{\n                let copy = {...response}\n                setProblemData(copy)\n            })\n        }\n    }, []);\n    const onChangeProblemData = (e:any)=>{\n        problemData[e.target.name] = e.target.value\n        setProblemData({...problemData})\n    }\n    const handleClick = () => {\n        problemService.modify(problemData, quiz, answer).then((response)=>{\n            console.log(response)\n            if(response === \"제목을 확인해주세요!\"){\n                error(response)\n            } else if (response === \"가격은 음수일수 없습니다!\"){\n                error(response)\n            }\n            else {\n                navigate(`../../problems/detail/${problemData.problemId}/?commentPage=1`)\n            }\n        })\n    }\n\n    return (\n        <>\n            <CustomBannerBox>\n                <CustomBanner>\n                    <Link to={\"/\"}><small>HOME</small></Link><br/><br/><br/>\n                    <p style={{fontSize:\"25px\"}}>문제 수정하기</p>\n                </CustomBanner>\n                <CustomBannerAside/>\n            </CustomBannerBox>\n            <FormBox>\n                <FormContainer>\n                    <p>문제 제목</p><br/>\n                    <WriteBasicInput type={\"text\"} value={problemData.title} name={\"title\"}\n                                     onChange={onChangeProblemData} required={true}/>\n                    <br/><br/><br/>\n                    <p>과목 선택</p><br/>\n                    <WriteBasicSelect value={problemData.category} name={\"category\"}\n                                      onChange={onChangeProblemData}>\n                        <option value=\"korean\">국어</option>\n                        <option value=\"math\">수학</option>\n                        <option value=\"english\">영어</option>\n                        <option value=\"science\">과학 탐구</option>\n                        <option value=\"social\">사회 탐구</option>\n                    </WriteBasicSelect>\n                    <br/><br/><br/>\n                    <p>난이도</p><br/>\n                    <WriteBasicSelect value={problemData.category || ''} name={\"level\"}\n                                      onChange={onChangeProblemData}>\n                        <option value=\"easy\">쉬움</option>\n                        <option value=\"normal\">보통</option>\n                        <option value=\"hard\">어려움</option>\n                    </WriteBasicSelect>\n                    <br/><br/><br/>\n                    <p>가격(C)</p><br/>\n                    <WriteBasicInput value={problemData.price} name={\"price\"}\n                                     onChange={onChangeProblemData} required={true}/>\n                    <br/><br/><br/>\n                    <p>문제 설명</p><br/>\n                    <WriteBasicInput value={problemData.description} name={\"description\"}\n                                     onChange={onChangeProblemData} required={true}/>\n                    <br/><br/><br/>\n                    <p>문제 이미지</p><br/>\n                    <WriteBasicInput accept={\"image/*\"} multiple={true} onChange={async (e:any)=>{\n                        quizList.push(e.currentTarget.files[0])\n                        setQuiz(quizList)\n                    }} type={\"file\"}/>\n                    <br/><br/><br/>\n                    <p>문제 정답</p><br/>\n                    <WriteBasicInput name={\"answer\"} value={problemData.answer}\n                                     onChange={onChangeProblemData} required={true}/>\n                    <ConfigProvider\n                        theme={{\n                            components: {\n                                Button: {\n                                    colorPrimary: `linear-gradient(135deg, ${colors1.join(', ')})`,\n                                    colorPrimaryHover: `linear-gradient(135deg, ${getHoverColors(colors1).join(', ')})`,\n                                    colorPrimaryActive: `linear-gradient(135deg, ${getActiveColors(colors1).join(', ')})`,\n                                    lineWidth: 0,\n                                },\n                            },\n                        }}\n                    >\n                        <div>\n                            <Button type=\"primary\" size=\"large\" onClick={() => {\n                                dispatch(changeIsModalOpenTrue())\n                            }}\n                                    style={{width: \"300px\", height: \"60px\", padding: \"0px 30px\", marginTop: \"30px\"}}>\n                                수정하기\n                            </Button>\n                        </div>\n                    </ConfigProvider>\n                </FormContainer>\n            </FormBox>\n            <AsideBox/>\n            {\n                isModalOpen ?\n                    <BlackBg>\n                        <UploadModalBox>\n                            <AnswerImgInputLabel htmlFor={\"answerImg\"}>\n                                <p>이미지 업로드 (클릭)</p>\n                            </AnswerImgInputLabel>\n                            <AnswerImgInputBtn onClick={handleClick}>진짜 수정</AnswerImgInputBtn>\n                            <CancelBtn onClick={() => {\n                                dispatch(changeIsModalOpenFalse())\n                            }}>취소</CancelBtn>\n                            <input style={{visibility:\"hidden\"}} id={\"answerImg\"} multiple={true} accept={\"image/*\"} onChange={ async (e: any) => {\n                                answerList.push(e.currentTarget.files[0])\n                                setAnswer(answerList)\n                            }} type=\"file\" />\n                        </UploadModalBox>\n                    </BlackBg> : <></>\n            }\n        </>\n    );\n}\n\nconst FormBox = styled.div`\n    width: 70%;\n    height: 100%;\n    background-color: #fff;\n    float: left;\n`\nconst AsideBox = styled.aside`\n    width: 30%;\n    height: 100%;\n    background-color: #fff;\n    float: right;\n`\nconst FormContainer = styled.div`\n    width: 90%;\n    height: 100%;\n    border: solid 1px rgb(250, 250, 250);\n    margin: 10px auto;\n    padding: 15px 20px;\n    font-size: 16px;\n    &:focus {\n        border:  solid 1px rgb(229,229,229);\n        outline: none;\n    }\n`\nexport const WriteBasicInput = styled.input`\n    width: 50%;\n    height: 20px;\n    min-width: 300px;\n    padding: 15px 20px;\n    font-size: 16px;\n    border: solid 1px rgb(229,229,229);\n    &:focus {\n        border:  solid 1px rgb(229,229,229);\n        outline: none;\n    }\n`\nexport const WriteBasicSelect = styled.select`\n    width: 53%;\n    height: 50px;\n    min-width: 340px;\n    padding: 0 20px;\n    font-size: 16px;\n    border: solid 1px rgb(229,229,229);\n`\nexport const WriteBasicImgDiv = styled.div`\n    width: 50%;\n    height: 180px;\n    min-width: 300px;\n    border: solid 1px rgb(229,229,229);\n    text-align: center;\n`\nexport const WriteBasicImgLabel = styled.label`\n    width: 500px;\n    height: 20px;\n    padding: 10px 50px;\n    border-radius: 10px;\n    background-color: #252525;\n    top: 30px;\n    color: #fff;\n    cursor: pointer;\n    &:hover {\n        background-color: #424242;\n    }\n`\nconst colors1 = ['#6253E1', '#04BEFE'];\nconst getHoverColors = (colors: string[]) =>\n    colors.map((color) => new TinyColor(color).lighten(5).toString());\nconst getActiveColors = (colors: string[]) =>\n    colors.map((color) => new TinyColor(color).darken(5).toString());\nexport default ModifyComponent;\n// export async function action({request,params}){\n//     const data = await request.formData();\n//\n// }"],"names":["FormBox","styled","div","_templateObject","_taggedTemplateLiteral","AsideBox","aside","_templateObject2","FormContainer","_templateObject3","WriteBasicInput","input","_templateObject4","WriteBasicSelect","select","_templateObject5","WriteBasicImgDiv","_templateObject6","WriteBasicImgLabel","label","_templateObject7","colors1","getHoverColors","colors","map","color","TinyColor","lighten","toString","getActiveColors","darken","writerId","memberRepository","getUserId","dispatch","useDispatch","navigate","useNavigate","problemId","useParams","quizList","answerList","quiz","setQuiz","useState","answer","setAnswer","isModalOpen","useSelector","state","problemData","setProblemData","title","price","description","category","level","messageApi","contextHolder","message","useMessage","error","content","open","type","concat","duration","useEffect","problemService","getOne","then","response","copy","onChangeProblemData","e","target","name","value","_jsxs","_Fragment","children","CustomBannerBox","CustomBanner","_jsx","Link","to","style","fontSize","CustomBannerAside","onChange","required","accept","multiple","async","push","currentTarget","files","ConfigProvider","theme","components","Button","colorPrimary","join","colorPrimaryHover","colorPrimaryActive","lineWidth","size","onClick","changeIsModalOpenTrue","width","height","padding","marginTop","BlackBg","UploadModalBox","AnswerImgInputLabel","htmlFor","AnswerImgInputBtn","handleClick","modify","console","log","CancelBtn","changeIsModalOpenFalse","visibility","id"],"sourceRoot":""}